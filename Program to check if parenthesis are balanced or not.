def findClosing(c):
	if c == '(':
		return ')'
	elif c == '{':
		return '}'
	elif c == '[':
		return ']'
	return -1

# function to check if parenthesis 
# are balanced.
def check(expr, n):

	# Base cases
	if n == 0:
		return True
	if n == 1:
		return False
	if expr[0] == ')' or \
	expr[0] == '}' or expr[0] == ']':
		return False

	# Search for closing bracket for first
	# opening bracket.
	closing = findClosing(expr[0])

	# count is used to handle cases like
	# "((()))". We basically need to
	# consider matching closing bracket.
	i = -1
	count = 0
	for i in range(1, n):
		if expr[i] == expr[0]:
			count += 1
		if expr[i] == closing:
			if count == 0:
				break
			count -= 1

	# If we did not find a closing
	# bracket
	if i == n:
		return False

	# If closing bracket was next
	# to open
	if i == 1:
		return check(expr[2:], n - 2)

	# If closing bracket was somewhere
	# in middle.
	return check(expr[1:], i - 1) and \
		check(expr[i + 1:], n - i - 1)

# Driver Code
if __name__ == "__main__":
	expr = "[(])"
	n = len(expr)

	if check(expr, n):
		print("Balanced")
	else:
		print("Not Balanced")
